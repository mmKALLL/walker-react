{"version":3,"sources":["components/button/button.js","components/footer-area/footer-area.js","components/main-menu/main-menu.js","App.tsx","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","Fragment","className","onClick","text","FooterArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","liked","_this2","LikeButton","setState","React","Component","MainMenu","startNewGame","footer_area_FooterArea","App","console","log","gameScreen","finishIntro","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAGe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UAAQE,UAAWL,EAAMK,UAAWC,QAASN,EAAMM,SAAUN,EAAMO,iBCFpDC,cACnB,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMZ,KACDgB,MAAQ,CAAEC,OAAO,GAFLR,wEAMV,IAAAS,EAAAN,KACP,OACEX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAACgB,EAAD,CAAYF,MAAOL,KAAKI,MAAMC,MAAOX,QAAS,kBAAMY,EAAKE,SAAS,CAAEH,OAAO,OAC3EhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBAAf,oCAXgCgB,IAAMC,WAiB9C,SAASH,EAAWnB,GAClB,OAAIA,EAAMiB,MACDhB,EAAAC,EAAAC,cAAA,8BAEAF,EAAAC,EAAAC,cAACJ,EAAD,CAAQO,QAASN,EAAMM,QAASC,KAAK,SCpBjC,SAASgB,EAASvB,GAC/B,OACEC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAJ,qBAAoCF,EAAAC,EAAAC,cAAA,uBAGpCF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAf,wBAGAJ,EAAAC,EAAAC,cAACJ,EAAD,CAAQM,UAAU,4CAA4CC,QAASN,EAAMwB,aAAcjB,KAAK,kBAIhGN,EAAAC,EAAAC,cAACsB,EAAD,WChBeC,cACnB,SAAAA,EAAY1B,GAAY,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,IACtBjB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgB,GAAAX,KAAAH,KAAMZ,KAIRwB,aAAe,WACbG,QAAQC,IAAI,eACZnB,EAAKW,SAAS,CACZS,WAAY,WARQpB,EAYxBqB,YAAc,WACZrB,EAAKW,SAAS,CACZS,WAAY,kBAZdpB,EAAKO,MAAQ,CAAEa,WAAY,aAFLpB,wEAmBtB,OACER,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACoB,EAAD,CAAUC,aAAcZ,KAAKY,uBAtBJF,mBCQbS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7780a0d.chunk.js","sourcesContent":["import React from 'react'\nimport './button.sass'\n\nexport default function Button(props) {\n  return (\n    <>\n      <button className={props.className} onClick={props.onClick}>{props.text}</button>\n    </>\n  );\n}\n","import React from 'react'\nimport Button from '../button/button';\nimport './footer-area.sass'\n\nexport default class FooterArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { liked: false };\n  }\n\n\n  render() {\n    return(\n      <div className=\"footer-container\">\n        <LikeButton liked={this.state.liked} onClick={() => this.setState({ liked: true })} />\n        <div className=\"copyright-notice\"> &copy; Esa Koskinen 2019 </div>\n      </div>\n    )\n  }\n}\n\nfunction LikeButton(props) {\n  if (props.liked) {\n    return <div>You liked this!</div>\n  } else {\n    return <Button onClick={props.onClick} text=\"Like\" />\n  }\n}\n","import React from 'react'\nimport './main-menu.sass'\nimport FooterArea from '../footer-area/footer-area'\nimport Button from '../button/button';\n\nexport default function MainMenu(props) {\n  return (\n    <div className=\"MainMenu\">\n      <h1>Walker</h1>\n      <br />\n      <h2><span>〜</span> Path to Darkness <span>〜</span></h2>\n\n\n      <div className=\"text-padded\">\n        Follow your destiny.\n      </div>\n      <Button className=\"button primary-action-button title-button\" onClick={props.startNewGame} text=\"Start walking\" />\n      {/* <button class=\"button ready primary-action-button title-button\" id=\"load-button\" onClick={props.loadGame}>Continue walking</button> */}\n      {/* <button class=\"button disabled primary-action-button title-button\" id=\"language-button\" onClick={props.changeLanguage('jp')}>日本語</button> */}\n\n      <FooterArea />\n    </div>\n  );\n}\n","import React, { Component } from 'react'\nimport './App.sass'\nimport MainMenu from './components/main-menu/main-menu';\n\nexport default class App extends Component {\n  constructor(props: any) {\n    super(props)\n    this.state = { gameScreen: 'main-menu' }\n  }\n\n  startNewGame = () => {\n    console.log('start intro')\n    this.setState({\n      gameScreen: 'intro'\n    })\n  }\n\n  finishIntro = () => {\n    this.setState({\n      gameScreen: 'in-game-main'\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MainMenu startNewGame={this.startNewGame} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.sass'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}