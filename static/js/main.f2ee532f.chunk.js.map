{"version":3,"sources":["components/button/button.js","components/footer-area/footer-area.js","components/main-menu/main-menu.js","components/cutscene/cutscene.tsx","components/status-area/status-area.js","components/action-panel/action-panel.tsx","components/mood-handler/mood-handler.tsx","components/in-game-view/in-game-view.tsx","components/game-screen/game-screen.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","Fragment","className","onClick","text","FooterArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","liked","_this2","LikeButton","setState","React","Component","MainMenu","startNewGame","footer_area_FooterArea","Cutscene","_useState","useState","_useState2","slicedToArray","textIndex","setTextIndex","lastIndex","length","advanceText","useEffect","interval","setInterval","textScreenTime","textFadeTime","clearInterval","endHandler","CutsceneText","settings","style","color","textColor","backgroundColor","bgColor","StatusArea","stepCount","position","ActionPanel","takeStepHandler","MoodHandler","TEXT_COLOR_SWITCH_THRESHOLD","TEXT_COLOR_DARK","TEXT_COLOR_LIGHT","mood","overall","r","g","b","colorBrightness","Math","sqrt","floor","concat","elem","document","documentElement","bgCSSColor","moodToCSSColor","textCSSColor","setProperty","InGameView","steps","abs","mood_handler_MoodHandler","GameScreen","console","log","screenName","finishIntro","in_game_view_InGameView","App","href","rel","game_screen_GameScreen","Boolean","window","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2ee532f.chunk.js","sourcesContent":["import React from 'react'\nimport './button.sass'\n\nexport default function Button(props) {\n  return (\n    <>\n      <button className={props.className} onClick={props.onClick}>{props.text}</button>\n    </>\n  );\n}\n","import React from 'react'\nimport Button from '../button/button';\nimport './footer-area.sass'\n\nexport default class FooterArea extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { liked: false }\n  }\n\n  render() {\n    return(\n      <div className=\"footer-container\">\n        <LikeButton liked={this.state.liked} onClick={() => this.setState({ liked: true })} />\n        <div className=\"copyright-notice\"> &copy; Esa Koskinen 2019 </div>\n      </div>\n    )\n  }\n}\n\nfunction LikeButton(props) {\n  if (props.liked) {\n    return <div>You liked this!</div>\n  } else {\n    return <Button onClick={props.onClick} text=\"Like\" />\n  }\n}\n","import React from 'react'\nimport './main-menu.sass'\nimport FooterArea from '../footer-area/footer-area'\nimport Button from '../button/button';\n\nexport default function MainMenu(props) {\n  return (\n    <div className=\"MainMenu\">\n      <h1>Walker</h1>\n      <br />\n      <h2><span>〜</span> Path to Darkness <span>〜</span></h2>\n\n\n      <div className=\"text-padded\">\n        Follow your destiny.\n      </div>\n      <Button className=\"button primary-action-button title-button\" onClick={props.startNewGame} text=\"Start walking\" />\n      {/* <button class=\"button ready primary-action-button title-button\" id=\"load-button\" onClick={props.loadGame}>Continue walking</button> */}\n      {/* <button class=\"button disabled primary-action-button title-button\" id=\"language-button\" onClick={props.changeLanguage('jp')}>日本語</button> */}\n\n      <FooterArea />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react'\nimport './cutscene.sass'\n\ninterface Props extends TextSettings {\n  text: string[]\n  endHandler: () => void\n}\n\ninterface TextSettings {\n  textScreenTime: number // milliseconds\n  textFadeTime: number\n  textColor: string\n  bgColor: string\n}\n\ninterface State {\n  textIndex: number\n}\n\nexport default function Cutscene(props: Props) {\n  const [textIndex, setTextIndex] = useState(0)\n  const lastIndex = props.text.length\n\n  const advanceText = () => setTextIndex(textIndex + 1)\n\n  useEffect(() => {\n    if (textIndex >= lastIndex) {\n      props.endHandler()\n      return\n    }\n    const interval = setInterval(advanceText, props.textScreenTime + props.textFadeTime * 2)\n    return () => clearInterval(interval)\n  })\n\n  const currentText = () => props.text[textIndex]\n\n    return (\n      <>\n        <CutsceneText text={currentText()} settings={ props } />\n      </>\n    )\n}\n\nfunction CutsceneText(props: { text: string, settings: TextSettings }) {\n  return (\n    <>\n      <div className='cutscene-text' style={{ color: props.settings.textColor, backgroundColor: props.settings.bgColor }}>\n        { props.text }\n      </div>\n    </>\n  )\n}\n","import React from 'react'\n\nexport default function StatusArea(props) {\n  return (\n    <>\n      Step count: { props.stepCount }<br />\n      Current position: { props.position }<br />\n    </>\n  )\n}\n\n","import React from 'react'\nimport Button from '../button/button'\n\ninterface Props {\n  takeStepHandler: (steps: number) => void\n}\n\nexport default function ActionPanel(props: Props) {\n  return (\n    <>\n      <Button text=\"Step forward\" className=\"button primary-action-button\" onClick={() => props.takeStepHandler(1)} />\n      <Button text=\"Take a step back\" className=\"button primary-action-button\" onClick={() => props.takeStepHandler(-1)} />\n    </>\n  )\n}\n","import React from 'react'\nimport { Mood } from '../in-game-view/in-game-view';\n\ninterface Props {\n  mood: Mood\n}\n\nexport default class MoodHandler extends React.Component<Props> {\n  private TEXT_COLOR_SWITCH_THRESHOLD: number = 137\n  private TEXT_COLOR_DARK: string = '#111'\n  private TEXT_COLOR_LIGHT: string = '#eee'\n\n  // Add overall mood to RGB values\n  private backgroundColor(mood: Mood): Mood {\n    return {\n      overall: 0,\n      r: mood.overall + mood.r,\n      g: mood.overall + mood.g,\n      b: mood.overall + mood.b,\n    }\n  }\n\n  private textColor(mood: Mood): string {\n    if (this.colorBrightness(mood) < this.TEXT_COLOR_SWITCH_THRESHOLD) {\n      return this.TEXT_COLOR_LIGHT\n    } else {\n      return this.TEXT_COLOR_DARK\n    }\n  }\n\n  // Return brightness of color in the HSP space; range 0-255.\n  // http://alienryderflex.com/hsp.html\n  private colorBrightness(mood: Mood): number {\n    return Math.sqrt(0.299 * mood.r * mood.r + 0.587 * mood.g * mood.g + 0.114 * mood.b * mood.b);\n  }\n\n  // Returns a CSS parseable RGB color.\n  private moodToCSSColor(mood: Mood): string {\n    const r = Math.floor(mood.r)\n    const g = Math.floor(mood.g)\n    const b = Math.floor(mood.b)\n    return `rgb(${r},${g},${b})`\n  }\n\n  render() {\n    const mood = this.props.mood\n    const elem = document.documentElement\n    const bgCSSColor = this.moodToCSSColor(this.backgroundColor(mood))\n    const textCSSColor = this.textColor(mood)\n    elem.style.setProperty(\"--mood-background-color\", bgCSSColor)\n    elem.style.setProperty(\"--mood-text-color\", textCSSColor)\n\n    return (\n      <>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport FooterArea from '../footer-area/footer-area';\nimport StatusArea from '../status-area/status-area';\nimport ActionPanel from '../action-panel/action-panel';\nimport MoodHandler from '../mood-handler/mood-handler';\n\ninterface State {\n  stepCount: number\n  position: number\n  mood: Mood\n}\n\nexport default class InGameView extends React.Component<{}, State> {\n  constructor(props: {}) {\n    super(props)\n    this.state = {\n      stepCount: 0,\n      position: 0, // Can step both forward and back\n      mood: {\n        overall: 40,\n        r: 0,\n        g: 0,\n        b: 0\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className='game-container'>\n        <StatusArea stepCount={ this.state.stepCount } position={ this.state.position } />\n        <ActionPanel\n            takeStepHandler={(steps) => this.setState((state) => ({\n              stepCount: state.stepCount + Math.abs(steps),\n              position: state.position + steps\n            }))}\n            />\n        <FooterArea />\n        <MoodHandler mood={ this.state.mood } />\n      </div>\n    )\n  }\n}\n\nexport type Mood = {\n  overall: number // 0-155. General mood level.\n  r: number // 0-100. Love, passion, bonds.\n  g: number // 0-100. Optimism, wellbeing, altruism.\n  b: number // 0-100. Rationality, thinking, calmness.\n}\n","import React from 'react'\nimport MainMenu from '../main-menu/main-menu';\nimport Cutscene from '../cutscene/cutscene';\nimport InGameView from '../in-game-view/in-game-view';\n\n\nexport default class GameScreen extends React.Component<{}, { screenName: string }> {\n\n  constructor(props: any) {\n    super(props)\n    this.state = { screenName: 'main-menu' }\n  }\n\n  startNewGame = () => {\n    console.log('start intro')\n    this.setState({\n      screenName: 'intro'\n    })\n  }\n\n  finishIntro = () => {\n    this.setState({\n      screenName: 'in-game-main'\n    })\n  }\n\n  render() {\n    if (this.state.screenName === 'main-menu') {\n      return (\n        <MainMenu startNewGame={this.startNewGame} />\n      )\n    } else if (this.state.screenName === 'intro') {\n      return (\n        <Cutscene text={['Money Match Games presents', 'The 40th Esagame']} textFadeTime={250} textScreenTime={400} bgColor='#fff' textColor='#111' endHandler={this.finishIntro} />\n      )\n    } else if (this.state.screenName === 'in-game-main') {\n      return (\n        <InGameView />\n      )\n    } else {\n      return (\n        <>\n          error in GameScreen state, please post issue at https://github.com/mmKALLL/walker-react\n        </>\n      )\n    }\n  }\n}\n","import React, { Component } from 'react'\nimport './App.sass'\nimport GameScreen from './components/game-screen/game-screen';\n\nexport default class App extends Component<{}, { gameScreen: string }> {\n  constructor(props: any) {\n    super(props)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <link href=\"https://fonts.googleapis.com/css?family=Charm|Gloria+Hallelujah|Noto+Sans+JP|Roboto+Slab\" rel=\"stylesheet\"></link>\n        <GameScreen />\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.sass'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}